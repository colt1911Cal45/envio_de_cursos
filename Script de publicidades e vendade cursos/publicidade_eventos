import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
import uuid
from flask import Flask, request, render_template, redirect, url_for

# Configura√ß√£o do Flask
app = Flask(__name__)

# Configura√ß√£o SMTP
smtp_server = 'smtp.office365.com'
smtp_port = 587
smtp_user = 'cursooline_contato@outlook.com.br'
smtp_password = 'Carmo135!@#'

# Simula√ß√£o de banco de dados para emails e tokens
subscribed_emails = {}  # email: token
unsubscribed_emails = set()  # emails que optaram por sair

# Fun√ß√£o para criar o corpo do email com a imagem e link de desinscri√ß√£o
def create_email_body(name, image_path, unsubscribe_url):
    with open(image_path, 'rb') as img:
        img_data = img.read()

    html = f"""
    <html>
    <body>
        <p>Ol√°, {name.split()[0]}, adquira j√° o curso da Nova Lei de Licita√ß√µes e Contratos</p>
        <p>Novo lan√ßamento de treinamento da NLLC por Maike Oliveira</p>
        <img src="cid:image1" alt="Curso atualizado">
        <p>üì¢ Curso de Licita√ß√µes e Contratos com Maike Oliveira! üì¢</p>
        <p>Voc√™ quer dominar o processo de licita√ß√µes e contratos e garantir o sucesso nos seus projetos? Ent√£o, n√£o perca a oportunidade de aprender com um dos maiores especialistas do mercado!</p>

        <p>üî∏ Maike Oliveira - Especialista em Licita√ß√µes e Contratos üî∏</p>

        <p>O que voc√™ vai aprender:</p>
        <ul>
            <li>Fundamentos das Licita√ß√µes: Entenda as leis e regulamentos essenciais.</li>
            <li>Estrat√©gias de Sucesso: Aprenda t√©cnicas avan√ßadas para preparar propostas vencedoras.</li>
            <li>Gest√£o de Contratos: Saiba como gerenciar e executar contratos de forma eficiente e eficaz.</li>
            <li>Casos Pr√°ticos: Estudo de casos reais para aplicar o conhecimento adquirido.</li>
        </ul>

        <p>Benef√≠cios Exclusivos:</p>
        <ul>
            <li>Acesso Vital√≠cio: Tenha acesso ao conte√∫do do curso para sempre.</li>
            <li>Suporte Especializado: Tire todas as suas d√∫vidas diretamente com Maike Oliveira.</li>
            <li>Networking: Conecte-se com outros profissionais da √°rea.</li>
        </ul>

        <p>Por que investir?</p>
        <ul>
            <li>Expertise Comprovada: Maike Oliveira √© um especialista renomado com vasta experi√™ncia em licita√ß√µes e contratos.</li>
            <li>Conte√∫do Atualizado: Mantenha-se atualizado com as √∫ltimas tend√™ncias e mudan√ßas na legisla√ß√£o.</li>
            <li>Crescimento Profissional: Aumente suas chances de sucesso e destaque-se no mercado de trabalho.</li>
        </ul>

        <p>üì≤ Para mais informa√ß√µes e inscri√ß√µes, acesse: <a href="[Insira o link de inscri√ß√£o]">[Insira o link de inscri√ß√£o]</a></p>

        <p>N√£o deixe essa oportunidade passar! Transforme sua carreira e seja um expert em Licita√ß√µes e Contratos com Maike Oliveira. üöÄ</p>

        <p>Se voc√™ n√£o quiser mais receber nossos emails, <a href="{unsubscribe_url}">clique aqui para descadastrar</a>.</p>
    </body>
    </html>
    """

    msg = MIMEMultipart()
    msg.attach(MIMEText(html, 'html'))
    image = MIMEImage(img_data, name='promocao.jpg')
    image.add_header('Content-ID', '<image1>')
    msg.attach(image)

    return msg

def send_email(to_email, subject, body):
    msg = MIMEMultipart()
    msg['From'] = smtp_user
    msg['To'] = to_email
    msg['Subject'] = subject

    msg.attach(body)

    try:
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(smtp_user, smtp_password)
            server.sendmail(smtp_user, to_email, msg.as_string())
        print(f"Email enviado para {to_email}")
    except Exception as e:
        print(f"Erro ao enviar email para {to_email}: {e}")

def generate_unsubscribe_url(email):
    token = str(uuid.uuid4())
    subscribed_emails[email] = token
    # Use uma URL base fixa ou configure o Flask para fornecer essa informa√ß√£o
    base_url = "http://localhost:5000/unsubscribe/confirm"
    return f"{base_url}?token={token}"

@app.route('/unsubscribe')
def unsubscribe():
    unsubscribe_confirm_url = url_for('unsubscribe_confirm', _external=True)
    return render_template('unsubscribe.html', unsubscribe_confirm_url=unsubscribe_confirm_url)

@app.route('/unsubscribe/confirm', methods=['GET'])
def unsubscribe_confirm():
    token = request.args.get('token')
    email = next((email for email, t in subscribed_emails.items() if t == token), None)
    
    if email:
        unsubscribed_emails.add(email)
        del subscribed_emails[email]
        return redirect(url_for('unsubscribe_success'))
    else:
        return "Token inv√°lido ou email n√£o encontrado", 400

@app.route('/unsubscribe/success')
def unsubscribe_success():
    return '''
    <html>
    <body>
        <h1>Voc√™ foi desinscrito com sucesso!</h1>
        <p>Voc√™ n√£o receber√° mais nossos emails. Agradecemos por seu tempo.</p>
    </body>
    </html>
    '''

# Envio de emails
recipients = [
    {"nome_completo": "Washington Souza do Carmo", "email": "ws.carmo.souza@gmail.com"}
    # Adicione os demais destinat√°rios aqui
]

for recipient in recipients:
    unsubscribe_url = generate_unsubscribe_url(recipient['email'])
    email_body = create_email_body(recipient['nome_completo'], 'DAVID.png', unsubscribe_url)
    
    subject = "Curso de Licita√ß√µes e Contratos com Maike Oliveira!"

    send_email(recipient['email'], subject, email_body)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=False)

